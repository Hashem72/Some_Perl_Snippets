#!/usr/bin/perl
use strict;
use warnings;

use lib "/nfs/users/nfs_h/hk3/src/lib/perl5";
use lib '/nfs/users/nfs_h/hk3/src/bioperl-live';
use lib '/nfs/users/nfs_h/hk3/src/ensembl/modules';
use lib '/nfs/users/nfs_h/hk3/src/ensembl-compara/modules';
use lib '/nfs/users/nfs_h/hk3/src/ensembl-variation/modules';
use lib '/nfs/users/nfs_h/hk3/src/ensembl-functgenomics/modules';
use Bio::EnsEMBL::Registry;
use Bio::Seq;
use Bio::SeqIO;
use Bio::AlignIO;
use Bio::Perl;
use Bio::FeatureIO;
use Bio::Tools::GFF;
use Bio::SeqFeature::Generic;



###############  subroutines #################################################


sub REMOVE_DUPLICATE_FEATURES_FROM_A_BED_FILE(){
#note: this is based on starting position of a feature ie if starting position is duplicated, then the feature is removed.
    my $input_bed_file         = shift;
    my $output_bed_file        = shift;




 my $in = Bio::FeatureIO->new(-format => 'bed', -file => $input_bed_file);
    my $feat;
    my @unique_positions;
    my %unique_features;
    while($feat = $in->next_feature()){
	my $start = $feat->start();
	$unique_features($start) = $feat;
    }
    open(TEMP, ">$output_bed_file") or die "Cannot open file $output_bed_file to write in!\n";
    foreach my $start_pos(keys %unique_features){
	print TEMP
	    $unique_features($start_pos)."\n";
    }
    close(TEMP);
    
}#REMOVE_DUPLICATE_FEATURES_FROM_A_BED_FILE#






